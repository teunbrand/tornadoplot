% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shape_tornado.R
\name{flatten_features}
\alias{flatten_features}
\title{Flatten features}
\usage{
flatten_features(
  tornado,
  assay_name = assayNames(tornado),
  measure = list(mean = colMeans2, sd = colSds, n = nrow)
)
}
\arguments{
\item{tornado}{A \linkS4class{TornadoExperiment} object.}

\item{assay_name}{A \code{character(1)}: one of the assay names.}

\item{measure}{A \strong{named} \code{list} wherein each element is a \code{function}.
Every function is expected to take a \code{nrow(x)} by \code{nbin(x)} matrix and
return one of these results:
\itemize{
\item An atomic vector of length 1. An example of this is \code{nrow()}.
\item An atomic vector of length \code{nbin(x)}. An example of this is
\code{colMeans()}.
\item An atomic matrix of dimension \code{nbin(x)} by \code{m} \emph{with} columnames.
An example of this is the \code{\link[matrixStats:rowQuantiles]{colQuantiles}}
function.
}
As one might infer from the mentioned example functions, the
\verb{col*}-patterned functions are generally appropriate. Alternatively, the
list elements can be \code{formula} with right-hand side. This follows the
\pkg{rlang} \link[rlang:as_function]{lambda syntax}.}
}
\value{
A long format \code{data.frame} with columns named after the \code{measure}
argument, as well as \code{position}, \code{feature_set} and elements from
\code{colData(x)}.
}
\description{
Summarise a \code{TornadoExperiment} at every bin position for every sample by
calculating a statistic over all features in a set. The defaults measure
the mean, standard deviation and number of features.
}
\examples{
# Summarise features
tor <- dummy_tornado()
df  <- flatten_features(tor)

# Estimate standard error of the mean
df$se <- sqrt(df$sd^2 / df$n)

# Plotting the result
require(ggplot2)
ggplot(df, aes(position, fill = feature_set)) +
  geom_ribbon(aes(ymin = mean - se, ymax = mean + se), alpha = 0.3) +
  geom_line(aes(y = mean, colour = feature_set)) +
  facet_wrap(~ sample_name)

# Calculating alternative metrics
require(matrixStats)
measure <- list(median = matrixStats::colMedians,
                mad = matrixStats::colMads,
                n = nrow)
df <- flatten_features(tor, measure = measure)
}
\seealso{
Other tornado utilities: 
\code{\link{melt_tornado}()},
\code{\link{norm_tornado}()},
\code{\link{sort_tornado}()}
}
\concept{tornado utilities}
